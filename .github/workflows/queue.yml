---
name: Queue
on:
  pull_request:
    branches:
      - main
      - release/**
    types: [opened, synchronize, reopened, labeled, unlabeled]

permissions:
  pull-requests: write
  id-token: write
  contents: write
  statuses: write

jobs:
  context:
    name: Context
    if: startsWith(github.head_ref, 'mergify/merge-queue/')
    runs-on: ["ubuntu-latest"]
    steps:
      - uses: cloudposse-github-actions/get-pr@v2
        id: pr
        with:
          id: ${{ github.event.pull_request.number }}

      - uses: actions/github-script@v7
        id: properties
        with:
          result-encoding: string
          script: |
            const properites = await github.request('GET /repos/{owner}/{repo}/properties/values', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            })
            
            properites.data.forEach((element) =>
              core.setOutput(element.property_name, element.value)              
            );
    outputs:
      go_mod_path: 'test/go.mod'
      go_sum_path: 'test/go.sum'
      terraform_state_path: 'state'
      terraform_state_retention_days: 10
      base: ${{ fromJSON(steps.pr.outputs.json).base.sha }}
      base_repo_owner: ${{ fromJSON(steps.pr.outputs.json).base.repo.owner.login }}
      base_repo_name: ${{ fromJSON(steps.pr.outputs.json).base.repo.name }}
      head_sha: ${{ fromJSON(steps.pr.outputs.json).head.sha }}
      head_repo_owner: ${{ fromJSON(steps.pr.outputs.json).head.repo.owner.login }}
      head_repo_name: ${{ fromJSON(steps.pr.outputs.json).head.repo.name }}
      found: ${{ steps.pr.outputs.found }}
      json: ${{ steps.pr.outputs.json }}
      number: ${{ steps.pr.outputs.number }}
      title: ${{ steps.pr.outputs.title }}
      body: ${{ steps.pr.outputs.body }}
      url: ${{ steps.pr.outputs.url }}
      created_at: ${{ steps.pr.outputs.created_at }}
      merged_at: ${{ steps.pr.outputs.merged_at }}
      closed_at: ${{ steps.pr.outputs.closed_at }}
      labels: ${{ steps.pr.outputs.labels }}
      test_aws_role: ${{ steps.properties.outputs.test-aws-role || 'arn:aws:iam::799847381734:role/cptest-test-gbl-sandbox-gha-iam-terratest' }}
      test_skip_concurrency: ${{ steps.properties.outputs.test-skip-concurrency }}
      test_needs_aws: ${{ steps.properties.outputs.test-needs-aws }}
      test_needs_fixtures: ${{ steps.properties.outputs.test-needs-fixtures }}
      atmos_version: 1.129.0
      uses_github: ${{ contains(fromJSON(steps.pr.outputs.json).base.repo.name, '-github-') || 
        contains(steps.pr.outputs.labels, 'terraform-github-provider') || 
        contains(steps.properties.outputs.providers, 'github') }}
      uses_opsgenie: ${{ contains(fromJSON(steps.pr.outputs.json).base.repo.name, '-opsgenie-') || 
        contains(steps.pr.outputs.labels, 'terraform-opsgenie-provider') || 
        contains(steps.properties.outputs.providers, 'opsgenie') }}
      uses_aws: ${{ contains(fromJSON(steps.pr.outputs.json).base.repo.name, '-aws-') || 
        contains(steps.pr.outputs.labels, 'terraform-aws-provider') || 
        contains(steps.properties.outputs.providers, 'aws') }}
      uses_spotinst: ${{ contains(fromJSON(steps.pr.outputs.json).base.repo.name, '-spotinst-') || 
        contains(steps.pr.outputs.labels, 'terraform-spotinst-provider') || 
        contains(steps.properties.outputs.providers, 'spotinst') }}
      uses_datadog: ${{ contains(fromJSON(steps.pr.outputs.json).base.repo.name, '-datadog-') || 
        contains(steps.pr.outputs.labels, 'terraform-datadog-provider') || 
        contains(steps.properties.outputs.providers, 'datadog') }}
      uses_tfe: ${{ contains(fromJSON(steps.pr.outputs.json).base.repo.name, '-tfe-') || 
        contains(steps.pr.outputs.labels, 'terraform-tfe-provider') || 
        contains(steps.properties.outputs.providers, 'tfe') }}
      uses_cloudflare: ${{ contains(fromJSON(steps.pr.outputs.json).base.repo.name, '-cloudflare-') || 
        contains(steps.pr.outputs.labels, 'terraform-cloudflare-provider') || 
        contains(steps.properties.outputs.providers, 'cloudflare') }}

  pending:
    needs: [context]
    runs-on: ["ubuntu-latest"]
    steps:
      - name: "Update GitHub Status: fixtures"
        if: ${{ needs.context.outputs.test_needs_fixtures == 'true' }}
        uses: docker://cloudposse/github-status-updater
        with:
          args: >-
            -action update_state
            -ref "${{ needs.context.outputs.head_sha }}"
            -owner "${{ needs.context.outputs.base_repo_owner }}"
            -repo "${{ needs.context.outputs.base_repo_name }}"
            -state pending
            -context "test/fixtures"
            -description ""
            -url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: "Update GitHub Status: cleanup"
        if: ${{ needs.context.outputs.test_needs_fixtures == 'true' }}
        uses: docker://cloudposse/github-status-updater
        with:
          args: >-
            -action update_state
            -ref "${{ needs.context.outputs.head_sha }}"
            -owner "${{ needs.context.outputs.base_repo_owner }}"
            -repo "${{ needs.context.outputs.base_repo_name }}"
            -state pending
            -context "test/cleanup"
            -description ""
            -url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: "Update GitHub Status: terratest"
        uses: docker://cloudposse/github-status-updater
        with:
          args: >-
            -action update_state
            -ref "${{ needs.context.outputs.head_sha }}"
            -owner "${{ needs.context.outputs.base_repo_owner }}"
            -repo "${{ needs.context.outputs.base_repo_name }}"
            -state pending
            -context "test/terratest"
            -description "Test run intiated by @${{ github.actor }}"
            -url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: "Update GitHub Status: terratest/terraform"
        uses: docker://cloudposse/github-status-updater
        with:
          args: >-
            -action update_state
            -ref "${{ needs.context.outputs.head_sha }}"
            -owner "${{ needs.context.outputs.base_repo_owner }}"
            -repo "${{ needs.context.outputs.base_repo_name }}"
            -state pending
            -context "test/terratest/terraform"
            -description "Waiting for test setup to finish"
            -url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: "Update GitHub Status: terratest/opentofu"
        uses: docker://cloudposse/github-status-updater
        with:
          args: >-
            -action update_state
            -ref "${{ needs.context.outputs.head_sha }}"
            -owner "${{ needs.context.outputs.base_repo_owner }}"
            -repo "${{ needs.context.outputs.base_repo_name }}"
            -state pending
            -context "test/terratest/opentofu"
            -description "Waiting for test setup to finish"
            -url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

  fixtures:
    runs-on: ["ubuntu-latest"]
    environment: terratest
    needs: [context, pending]
    env:
      AWS_REGION: us-east-2
      AWS_ROLE_TO_ASSUME: ${{ needs.context.outputs.test_aws_role }}
    continue-on-error: false
    outputs:
      terraform_state_artifact_id: ${{ steps.upload.outputs.artifact-id }}
    steps:
      - name: "Checkout code for ChatOps"
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.context.outputs.head_repo_owner }}/${{ needs.context.outputs.head_repo_name }}
          ref: ${{ needs.context.outputs.head_sha }}

      - name: "Update GitHub Status: fixtures"
        uses: docker://cloudposse/github-status-updater
        with:
          args: >-
            -action update_state
            -ref "${{ needs.context.outputs.head_sha }}"
            -owner "${{ needs.context.outputs.base_repo_owner }}"
            -repo "${{ needs.context.outputs.base_repo_name }}"
            -state pending
            -context "test/fixtures"
            -description "Tests fixtures being created"
            -url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: "Update GitHub Status: cleanup"
        uses: docker://cloudposse/github-status-updater
        with:
          args: >-
            -action update_state
            -ref "${{ needs.context.outputs.head_sha }}"
            -owner "${{ needs.context.outputs.base_repo_owner }}"
            -repo "${{ needs.context.outputs.base_repo_name }}"
            -state pending
            -context "test/cleanup"
            -description "Waiting for tests to finish"
            -url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: "Install Tofu"
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_wrapper: false

      - name: "Link Terraform to Tofu"
        run: |
          ln -sfnT "$(which tofu)" "$(dirname $(which tofu))"/terraform 

      - name: "Check if test/run.sh exists"
        id: skip-tests
        run: |-
          if [ -f "test/run.sh" ]; then
            echo "result=true" >> $GITHUB_OUTPUT
          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi

      - name: "Install Atmos"
        uses: cloudposse/github-action-setup-atmos@v2
        with:
          install-wrapper: false
          atmos-version: ${{ needs.context.outputs.atmos_version }}

      - name: "Install Go"
        uses: actions/setup-go@v5
        if: ${{ steps.skip-tests.outputs.result == 'false' }}
        with:
          go-version-file: "${{ needs.context.outputs.go_mod_path }}"
          cache-dependency-path: "${{ needs.context.outputs.go_sum_path }}"

      - uses: actions/create-github-app-token@v1
        if: ${{ needs.context.outputs.uses_github == 'true' }}
        id: github-app
        with:
          app-id: ${{ vars.BOT_GITHUB_APP_ID }}
          private-key: ${{ secrets.BOT_GITHUB_APP_PRIVATE_KEY }}
          owner: 'cloudposse-tests'

      - name: "Inject secrets"
        env:
          USES_GITHUB: ${{ needs.context.outputs.uses_github }}
          USES_OPSGENIE: ${{ needs.context.outputs.uses_opsgenie }}
          USES_SPOTINST: ${{ needs.context.outputs.uses_spotinst }}
          USES_DATADOG: ${{ needs.context.outputs.uses_datadog }}
          USES_TFE: ${{ needs.context.outputs.uses_tfe }}
          USES_CLOUDFLARE: ${{ needs.context.outputs.uses_cloudflare }}
          OPSGENIE_API_KEY: ${{ secrets.OPSGENIE_API_KEY }}
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_APP_KEY: ${{ secrets.DD_APP_KEY }}
          SPOTINST_TOKEN: ${{ secrets.SPOTINST_TOKEN }}
          SPOTINST_ACCOUNT: ${{ secrets.SPOTINST_ACCOUNT }}
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          GITHUB_TOKEN: ${{ steps.github-app.outputs.token }}
        run: |
          if [[ "$USES_DATADOG" == "true" ]]; then
            printf "%s=%s\n"  DD_API_KEY "$DD_API_KEY" >> "$GITHUB_ENV"
            printf "%s=%s\n"  DD_APP_KEY "$DD_APP_KEY" >> "$GITHUB_ENV"
            echo exported Datadog
          fi
          if [[ "$USES_GITHUB" == "true" ]]; then
            printf "%s=%s\n"  GITHUB_TOKEN     "$GITHUB_TOKEN"     >> "$GITHUB_ENV"
            echo exported GitHub
          fi
          if [[ "$USES_OPSGENIE" == "true" ]]; then
            printf "%s=%s\n"  OPSGENIE_API_KEY "$OPSGENIE_API_KEY" >> "$GITHUB_ENV"
            echo exported Opsgenie
          fi
          if [[ "$USES_SPOTINST" == "true" ]]; then
            printf "%s=%s\n"  SPOTINST_TOKEN   "$SPOTINST_TOKEN"   >> "$GITHUB_ENV"
            printf "%s=%s\n"  SPOTINST_ACCOUNT "$SPOTINST_ACCOUNT" >> "$GITHUB_ENV"
            echo exported Spotinst
          fi
          if [[ "$USES_TFE" == "true" ]]; then
            printf "%s=%s\n"  TFE_TOKEN   "$TFE_TOKEN"   >> "$GITHUB_ENV"
            echo exported Terraform Cloud
          fi
          if [[ "$USES_CLOUDFLARE" == "true" ]]; then
            printf "%s=%s\n"  CLOUDFLARE_EMAIL   "$CLOUDFLARE_EMAIL"   >> "$GITHUB_ENV"
            printf "%s=%s\n"  CLOUDFLARE_API_KEY "$CLOUDFLARE_API_KEY" >> "$GITHUB_ENV"
            echo exported CloudFlare
          fi

      - name: Configure AWS Credentials
        if: ${{ needs.context.outputs.test_needs_aws == 'true' ||
          needs.context.outputs.uses_datadog == 'true' ||
          needs.context.outputs.uses_spotinst == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        id: aws
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          role-session-name: "terratest"
          mask-aws-account-id: "no"

      - name: "Create fixtures"
        id: fixtures  
        run: |-
          terraform --version
          mkdir -p ${{ needs.context.outputs.terraform_state_path }}
          touch ${{ needs.context.outputs.terraform_state_path }}/.artifact.keep           
          cd test
          # go test -v -timeout 1h -skip-tests -skip-teardown
          # go test -v -timeout 1h  --only-deploy-dependencies --skip-destroy-dependencies --state-dir=${{ needs.context.outputs.terraform_state_path }}
          cd -

      - name: "Save Terraform state for fixtures"
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: state
          path: ${{ needs.context.outputs.terraform_state_path }}
          include-hidden-files: true
          retention-days: ${{ needs.context.outputs.terraform_state_retention_days }}

      - name: "Update GitHub Status for failure"
        if: ${{ failure() }}
        uses: docker://cloudposse/github-status-updater
        with:
          args: >-
            -action update_state
            -ref "${{ needs.context.outputs.head_sha }}"
            -owner "${{ needs.context.outputs.base_repo_owner }}"
            -repo "${{ needs.context.outputs.base_repo_name }}"
            -state failure
            -context "test/fixtures"
            -description "Creating test fixtures failed"
            -url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: "Update GitHub Status for this success"
        uses: docker://cloudposse/github-status-updater
        with:
          args: >-
            -action update_state
            -ref "${{ needs.context.outputs.head_sha }}"
            -owner "${{ needs.context.outputs.base_repo_owner }}"
            -repo "${{ needs.context.outputs.base_repo_name }}"
            -state success
            -context "test/fixtures"
            -description "Successfully created test fixtures"
            -url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: "Update GitHub Status for cancelled"
        if: ${{ cancelled() }}
        uses: docker://cloudposse/github-status-updater
        with:
          args: >-
            -action update_state
            -ref "${{ needs.context.outputs.head_sha }}"
            -owner "${{ needs.context.outputs.base_repo_owner }}"
            -repo "${{ needs.context.outputs.base_repo_name }}"
            -state error
            -context "test/fixtures"
            -description "Creating test fixtures cancelled"
            -url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

  terratest:
    runs-on: ["ubuntu-latest"]
    environment: terratest
    needs: [context, fixtures]
    env:
      MAKE_INCLUDES: Makefile
      AWS_REGION: us-east-2
      AWS_ROLE_TO_ASSUME: ${{ needs.context.outputs.test_aws_role }}
    continue-on-error: false
    strategy:
      max-parallel: ${{ needs.context.outputs.test_skip_concurrency == 'true' && 1 || 10 }}
      fail-fast: false # Don't fail fast to avoid locking TF State
      matrix:
        platform: [terraform, opentofu]
    steps:
      - name: "Checkout code for ChatOps"
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.context.outputs.head_repo_owner }}/${{ needs.context.outputs.head_repo_name }}
          ref: ${{ needs.context.outputs.head_sha }}

      - name: "Update GitHub Status: ${{ matrix.platform }} started"
        uses: docker://cloudposse/github-status-updater
        with:
          args: >-
            -action update_state
            -ref "${{ needs.context.outputs.head_sha }}"
            -owner "${{ needs.context.outputs.base_repo_owner }}"
            -repo "${{ needs.context.outputs.base_repo_name }}"
            -state pending
            -context "test/terratest/${{ matrix.platform }}"
            -description "Tests started"
            -url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: "Install Tofu"
        if: ${{ matrix.platform == 'opentofu' }}
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_wrapper: false

      - name: "Link Terraform to Tofu"
        if: ${{ matrix.platform == 'opentofu' }}
        run: |
          ln -sfnT "$(which tofu)" "$(dirname $(which tofu))"/terraform 

      - name: "Install Terraform"
        if: ${{ matrix.platform == 'terraform' }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: "Install Atmos"
        uses: cloudposse/github-action-setup-atmos@v2
        with:
          install-wrapper: false
          atmos-version: ${{ needs.context.outputs.atmos_version }}

      - name: "Check if test/run.sh exists"
        id: skip-tests
        run: |-
          if [ -f "test/run.sh" ]; then
            echo "result=true" >> $GITHUB_OUTPUT
          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi  

      - name: "Install Go"
        uses: actions/setup-go@v5
        if: ${{ steps.skip-tests.outputs.result == 'false' }}
        with:
          go-version-file: "${{ needs.context.outputs.go_mod_path }}"
          cache-dependency-path: "${{ needs.context.outputs.go_sum_path }}"

      - uses: actions/create-github-app-token@v1
        if: ${{ needs.context.outputs.uses_github == 'true' }}
        id: github-app
        with:
          app-id: ${{ vars.BOT_GITHUB_APP_ID }}
          private-key: ${{ secrets.BOT_GITHUB_APP_PRIVATE_KEY }}
          owner: 'cloudposse-tests'
  
      - name: "Inject secrets"
        env:
          USES_GITHUB: ${{ needs.context.outputs.uses_github }}
          USES_OPSGENIE: ${{ needs.context.outputs.uses_opsgenie }}
          USES_SPOTINST: ${{ needs.context.outputs.uses_spotinst }}
          USES_DATADOG: ${{ needs.context.outputs.uses_datadog }}
          USES_TFE: ${{ needs.context.outputs.uses_tfe }}
          USES_CLOUDFLARE: ${{ needs.context.outputs.uses_cloudflare }}
          OPSGENIE_API_KEY: ${{ secrets.OPSGENIE_API_KEY }}
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_APP_KEY: ${{ secrets.DD_APP_KEY }}
          SPOTINST_TOKEN: ${{ secrets.SPOTINST_TOKEN }}
          SPOTINST_ACCOUNT: ${{ secrets.SPOTINST_ACCOUNT }}
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          GITHUB_TOKEN: ${{ steps.github-app.outputs.token }}
        shell: bash
        run: |
          if [[ "$USES_DATADOG" == "true" ]]; then
            printf "%s=%s\n"  DD_API_KEY "$DD_API_KEY" >> "$GITHUB_ENV"
            printf "%s=%s\n"  DD_APP_KEY "$DD_APP_KEY" >> "$GITHUB_ENV"
            echo exported Datadog
          fi
          if [[ "$USES_GITHUB" == "true" ]]; then
            printf "%s=%s\n"  GITHUB_TOKEN     "$GITHUB_TOKEN"     >> "$GITHUB_ENV"
            echo exported GitHub
          fi
          if [[ "$USES_OPSGENIE" == "true" ]]; then
            printf "%s=%s\n"  OPSGENIE_API_KEY "$OPSGENIE_API_KEY" >> "$GITHUB_ENV"
            echo exported Opsgenie
          fi
          if [[ "$USES_SPOTINST" == "true" ]]; then
            printf "%s=%s\n"  SPOTINST_TOKEN   "$SPOTINST_TOKEN"   >> "$GITHUB_ENV"
            printf "%s=%s\n"  SPOTINST_ACCOUNT "$SPOTINST_ACCOUNT" >> "$GITHUB_ENV"
            echo exported Spotinst
          fi
          if [[ "$USES_TFE" == "true" ]]; then
            printf "%s=%s\n"  TFE_TOKEN   "$TFE_TOKEN"   >> "$GITHUB_ENV"
            echo exported Terraform Cloud
          fi
          if [[ "$USES_CLOUDFLARE" == "true" ]]; then
            printf "%s=%s\n"  CLOUDFLARE_EMAIL   "$CLOUDFLARE_EMAIL"   >> "$GITHUB_ENV"
            printf "%s=%s\n"  CLOUDFLARE_API_KEY "$CLOUDFLARE_API_KEY" >> "$GITHUB_ENV"
            echo exported CloudFlare
          fi

      - name: Configure AWS Credentials
        if: ${{ needs.context.outputs.test_needs_aws == 'true' ||
          needs.context.outputs.uses_datadog == 'true' ||
          needs.context.outputs.uses_spotinst == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        id: aws
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          role-session-name: "terratest"
          mask-aws-account-id: "no"

      - name: "Download Terraform state for fixtures"
        uses: actions/download-artifact@v4
        with:
          name: state
          path: ${{ needs.context.outputs.terraform_state_path }}

      - name: "Test component"
        if: ${{ steps.skip-tests.outputs.result == 'false' }}          
        uses: robherley/go-test-action@v0
        with:
          moduleDirectory: test
          testArguments: -v -timeout 1h
          # testArguments: -v -timeout 1h --skip-deploy-dependencies --skip-destroy-dependencies --state-dir=${{ needs.context.outputs.terraform_state_path }}
          # -skip-setup -skip-teardown

      - name: "Update GitHub Status for failure"
        if: ${{ failure() }}
        uses: docker://cloudposse/github-status-updater
        with:
          args: >-
            -action update_state
            -ref "${{ needs.context.outputs.head_sha }}"
            -owner "${{ needs.context.outputs.base_repo_owner }}"
            -repo "${{ needs.context.outputs.base_repo_name }}"
            -state failure
            -context "test/terratest/${{ matrix.platform }}"
            -description "Tests failed"
            -url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: "Update GitHub Status for this success"
        uses: docker://cloudposse/github-status-updater
        with:
          args: >-
            -action update_state
            -ref "${{ needs.context.outputs.head_sha }}"
            -owner "${{ needs.context.outputs.base_repo_owner }}"
            -repo "${{ needs.context.outputs.base_repo_name }}"
            -state success
            -context "test/terratest/${{ matrix.platform }}"
            -description "Tests passed"
            -url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: "Update GitHub Status for cancelled"
        if: ${{ cancelled() }}
        uses: docker://cloudposse/github-status-updater
        with:
          args: >-
            -action update_state
            -ref "${{ needs.context.outputs.head_sha }}"
            -owner "${{ needs.context.outputs.base_repo_owner }}"
            -repo "${{ needs.context.outputs.base_repo_name }}"
            -state error
            -context "test/terratest/${{ matrix.platform }}"
            -description "Tests cancelled"
            -url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

  cleanup:
    if: ${{ always() && startsWith(github.head_ref, 'mergify/merge-queue/') }}
    runs-on: ["ubuntu-latest"]
    environment: terratest
    needs: [context, terratest]
    env:
      MAKE_INCLUDES: Makefile
      AWS_REGION: us-east-2
      AWS_ROLE_TO_ASSUME: ${{ needs.context.outputs.test_aws_role }}
    continue-on-error: true
    steps:
      - name: "Checkout code for ChatOps"
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.context.outputs.head_repo_owner }}/${{ needs.context.outputs.head_repo_name }}
          ref: ${{ needs.context.outputs.head_sha }}

      - name: "Update GitHub Status: cleanup started"
        uses: docker://cloudposse/github-status-updater
        with:
          args: >-
            -action update_state
            -ref "${{ needs.context.outputs.head_sha }}"
            -owner "${{ needs.context.outputs.base_repo_owner }}"
            -repo "${{ needs.context.outputs.base_repo_name }}"
            -state pending
            -context "test/cleanup"
            -description "Tests fixtures being destroyed"
            -url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: "Install Tofu"
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_wrapper: false

      - name: "Link Terraform to Tofu"
        run: |
          ln -sfnT "$(which tofu)" "$(dirname $(which tofu))"/terraform 

      - name: "Install Atmos"
        uses: cloudposse/github-action-setup-atmos@v2
        with:
          install-wrapper: false
          atmos-version: ${{ needs.context.outputs.atmos_version }}

      - name: "Check if test/run.sh exists"
        id: skip-tests
        run: |-
          if [ -f "test/run.sh" ]; then
            echo "result=true" >> $GITHUB_OUTPUT
          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi  

      - name: "Comment on PR if tests skipped"
        if: ${{ steps.skip-tests.outputs.result == 'true' }}
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = ${{ needs.context.outputs.number }};
            const comments = await github.rest.issues.listComments({
              owner: "${{ needs.context.outputs.base_repo_owner }}",
              repo: "${{ needs.context.outputs.base_repo_name }}",
              issue_number: issueNumber,
            });

            const commentBody = "There are no real tests for this component. So we set terratest statuses to successful execution without running any tests";
            const commentExists = comments.data.some(comment => comment.body === commentBody);

            if (!commentExists) {
              await github.rest.issues.createComment({
                owner: "${{ needs.context.outputs.base_repo_owner }}",
                repo: "${{ needs.context.outputs.base_repo_name }}",
                issue_number: issueNumber,
                body: commentBody,
              });
            }

      - name: "Install Go"
        uses: actions/setup-go@v5
        if: ${{ steps.skip-tests.outputs.result == 'false' }}
        with:
          go-version-file: "${{ needs.context.outputs.go_mod_path }}"
          cache-dependency-path: "${{ needs.context.outputs.go_sum_path }}"

      - name: "Download Terraform state for fixtures"
        uses: actions/download-artifact@v4
        with:
          name: state
          path: ${{ needs.context.outputs.terraform_state_path }}

      - uses: actions/create-github-app-token@v1
        if: ${{ needs.context.outputs.uses_github == 'true' }}
        id: github-app
        with:
          app-id: ${{ vars.BOT_GITHUB_APP_ID }}
          private-key: ${{ secrets.BOT_GITHUB_APP_PRIVATE_KEY }}
          owner: 'cloudposse-tests'
  
      - name: "Inject secrets"
        env:
          USES_GITHUB: ${{ needs.context.outputs.uses_github }}
          USES_OPSGENIE: ${{ needs.context.outputs.uses_opsgenie }}
          USES_SPOTINST: ${{ needs.context.outputs.uses_spotinst }}
          USES_DATADOG: ${{ needs.context.outputs.uses_datadog }}
          USES_TFE: ${{ needs.context.outputs.uses_tfe }}
          USES_CLOUDFLARE: ${{ needs.context.outputs.uses_cloudflare }}
          OPSGENIE_API_KEY: ${{ secrets.OPSGENIE_API_KEY }}
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_APP_KEY: ${{ secrets.DD_APP_KEY }}
          SPOTINST_TOKEN: ${{ secrets.SPOTINST_TOKEN }}
          SPOTINST_ACCOUNT: ${{ secrets.SPOTINST_ACCOUNT }}
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
          CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
          GITHUB_TOKEN: ${{ steps.github-app.outputs.token }}
        shell: bash
        run: |
          if [[ "$USES_DATADOG" == "true" ]]; then
            printf "%s=%s\n"  DD_API_KEY "$DD_API_KEY" >> "$GITHUB_ENV"
            printf "%s=%s\n"  DD_APP_KEY "$DD_APP_KEY" >> "$GITHUB_ENV"
            echo exported Datadog
          fi
          if [[ "$USES_GITHUB" == "true" ]]; then
            printf "%s=%s\n"  GITHUB_TOKEN     "$GITHUB_TOKEN"     >> "$GITHUB_ENV"
            echo exported GitHub
          fi
          if [[ "$USES_OPSGENIE" == "true" ]]; then
            printf "%s=%s\n"  OPSGENIE_API_KEY "$OPSGENIE_API_KEY" >> "$GITHUB_ENV"
            echo exported Opsgenie
          fi
          if [[ "$USES_SPOTINST" == "true" ]]; then
            printf "%s=%s\n"  SPOTINST_TOKEN   "$SPOTINST_TOKEN"   >> "$GITHUB_ENV"
            printf "%s=%s\n"  SPOTINST_ACCOUNT "$SPOTINST_ACCOUNT" >> "$GITHUB_ENV"
            echo exported Spotinst
          fi
          if [[ "$USES_TFE" == "true" ]]; then
            printf "%s=%s\n"  TFE_TOKEN   "$TFE_TOKEN"   >> "$GITHUB_ENV"
            echo exported Terraform Cloud
          fi
          if [[ "$USES_CLOUDFLARE" == "true" ]]; then
            printf "%s=%s\n"  CLOUDFLARE_EMAIL   "$CLOUDFLARE_EMAIL"   >> "$GITHUB_ENV"
            printf "%s=%s\n"  CLOUDFLARE_API_KEY "$CLOUDFLARE_API_KEY" >> "$GITHUB_ENV"
            echo exported CloudFlare
          fi

      - name: Configure AWS Credentials
        if: ${{ needs.context.outputs.test_needs_aws == 'true' ||
          needs.context.outputs.uses_datadog == 'true' ||
          needs.context.outputs.uses_spotinst == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        id: aws
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          role-session-name: "terratest"
          mask-aws-account-id: "no"

      - name: "Destroy fixtures"
        id: fixtures
        run: |-
          terraform --version
          cd test
          # go test -v -timeout 1h -skip-setup -skip-tests
          # go test -v -timeout 1h --only-deploy-dependencies --state-dir=${{ needs.context.outputs.terraform_state_path }}
          cd -          

      # We need repo write permissions to delete artifacts, which we don't have and don't want to have.
      #  - name: Delete Artifact
      #    uses: actions/github-script@v7
      #    if: needs.fixture_id.outputs.terraform_state_artifact_id != ''
      #    with:
      #      script: |
      #        const owner = context.repo.owner;
      #        const repo = context.repo.repo;
      #        const artifact_id = "${{ needs.fixture_id.outputs.terraform_state_artifact_id }}";
      #        const response = await github.rest.actions.deleteArtifact({
      #          owner,
      #          repo,
      #          artifact_id
      #        });
      #
      #        if (response.status !== 204) {
      #          console.log('Deletion failed or encountered an issue, status:', response.status);
      #          // Check if there is an error message in the response body and log it
      #          if (response.data && response.data.message) {
      #            console.log('Error message:', response.data.message);
      #          }
      #        }

      - name: "Update GitHub Status for failure"
        if: ${{ failure() }}
        uses: docker://cloudposse/github-status-updater
        with:
          args: >-
            -action update_state
            -ref "${{ needs.context.outputs.head_sha }}"
            -owner "${{ needs.context.outputs.base_repo_owner }}"
            -repo "${{ needs.context.outputs.base_repo_name }}"
            -state failure
            -context "test/cleanup"
            -description "Destroying test fixtures failed"
            -url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: "Update GitHub Status for this success"
        uses: docker://cloudposse/github-status-updater
        with:
          args: >-
            -action update_state
            -ref "${{ needs.context.outputs.head_sha }}"
            -owner "${{ needs.context.outputs.base_repo_owner }}"
            -repo "${{ needs.context.outputs.base_repo_name }}"
            -state success
            -context "test/cleanup"
            -description "Successfully destroyed test fixtures"
            -url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: "Update GitHub Status for cancelled"
        if: ${{ cancelled() }}
        uses: docker://cloudposse/github-status-updater
        with:
          args: >-
            -action update_state
            -ref "${{ needs.context.outputs.head_sha }}"
            -owner "${{ needs.context.outputs.base_repo_owner }}"
            -repo "${{ needs.context.outputs.base_repo_name }}"
            -state error
            -context "test/cleanup"
            -description "Destroying test fixtures cancelled"
            -url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

  results:
    runs-on: ["ubuntu-latest"]
    needs: [terratest, context]
    if: ${{ always() && needs.context.result != 'skipped' }}
    steps:
      - shell: bash
        id: status
        run: |
          if [[ '${{ needs.terratest.result }}' == 'success' ]]; then
              echo "result=success" >> $GITHUB_OUTPUT
          elif [[ '${{ needs.terratest.result }}' == 'cancelled' ]]; then
            echo "result=failure" >> $GITHUB_OUTPUT
          elif [[ '${{ needs.terratest.result }}' == 'failure' ]]; then
            echo "result=failure" >> $GITHUB_OUTPUT
          elif [[ '${{ needs.terratest.result }}' == 'skipped' ]]; then
            echo "result=failure" >> $GITHUB_OUTPUT
          else
              echo "Some tests failed"
              exit 1
          fi

      - name: "Update GitHub Status: finished"
        uses: docker://cloudposse/github-status-updater
        with:
          args: >-
            -action update_state
            -ref "${{ needs.context.outputs.head_sha }}"
            -owner "${{ needs.context.outputs.base_repo_owner }}"
            -repo "${{ needs.context.outputs.base_repo_name }}"
            -state ${{ steps.status.outputs.result }}
            -context "test/terratest"
            -description "Test run finished"
            -url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GITHUB_TOKEN: ${{ github.token }}

